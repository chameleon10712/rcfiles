" ============================================================================ "
" Plug initialization
" ============================================================================ "

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Plugins
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'dhruvasagar/vim-table-mode'
Plug 'pi314/ime.vim'
Plug 'pi314/ime-wide.vim'
Plug 'pi314/ime-braille.vim'
Plug 'pi314/ime-emoji.vim'
Plug 'pi314/ime-runes.vim'
Plug 'pi314/ime-phonetic.vim'
Plug 'pi314/pi314.asciiart.vim'
Plug 'pi314/pi314.rst.vim'
Plug 'pi314/todo-or-not-todo.vim'
Plug 'zdict/zdict.vim'
Plug 'rust-lang/rust.vim'
Plug 'dodie/vim-disapprove-deep-indentation'

call plug#end()
" ============================================================================ "
" Plug ok
" ============================================================================ "

" Encoding settings
let $LANG="zh_TW.UTF-8"
set encoding=utf8
set langmenu=zh_TW.UTF-8
try
    language message zh_TW.UTF-8
catch /E197/
    language message en_US.UTF-8
endtry

if has("win32")
    "reload menu with UTF-8 encoding
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    set guifont=MingLiU:h14:cANSI
endif

set fileformat=unix

set ambiwidth=single

" Show mode on bottom-left
set showmode

" Show command on bottom-right
set showcmd

" ============== "
" Color settings "
" ============== "
syntax on
set hlsearch
set background=dark
set colorcolumn=80  " put a vertical line on column 80


augroup pi314
    autocmd!
    " Load colorscheme pi314 for every window.
    " Note: BufReadPost doesn't work on non-exist files
    autocmd BufWinEnter * colorscheme pi314

    " automatically purge trailing space on save
    autocmd BufWritePre * :%s/\s\+$//e
augroup END


" Tab charactor related settings
set expandtab       " changes user pressed TAB to spaces
set smarttab
set nosmartindent
set autoindent
set tabstop=4       " changes the width of the TAB character
set shiftwidth=4    " >>, <<, == width and automatic indent width
set softtabstop=4
set listchars=tab:>-
set list

set wrap

" Ignore case on searching
set ignorecase

" Show the coordinate of cursor
set ruler

" Enable backspace
set backspace=indent,eol,start

" Show line numbers
set number

" Status line
set laststatus=2
set wildmenu

set scrolloff=5

" tell vim don't create {filename}~
set nobackup
set nowritebackup
if exists('+persistent_undo')
    " tell vim don't create .{filename}.un~
    set noundofile
endif

" set fold method as marker
set foldmethod=marker

" Funny Setting
set norightleft

" Disable X11 clipboard, it help vim not hanging on start
set clipboard=exclude:.*

" new vertical split appear on right hand side
set splitright
set splitbelow

set pastetoggle=<leader>p

" ======== "
" Mappings "
" ======== "

" move moving between long wrapped lines
" must use nnoremap = no recursive map
nnoremap k gk
nnoremap j gj
vnoremap k gk
vnoremap j gj

nnoremap th :tabp<CR>
nnoremap tl :tabn<CR>
nnoremap tt :tabe<SPACE>
if v:version < 704
    nnoremap tp :execute "tabmove" (tabpagenr()-2)<CR>
    nnoremap tn :execute "tabmove" tabpagenr()<CR>
else
    nnoremap tp :tabm -1<CR>
    nnoremap tn :tabm +1<CR>
endif
let g:NERDTreeMapOpenInTab='tt'
nnoremap t! :tabn 1<CR>
nnoremap t@ :tabn 2<CR>
nnoremap t# :tabn 3<CR>
nnoremap t$ :tabn 4<CR>
nnoremap t% :tabn 5<CR>
nnoremap t^ :tabn 6<CR>
nnoremap t& :tabn 7<CR>
nnoremap t* :tabn 8<CR>
nnoremap t( :tabn 9<CR>

" toggle the nerd tree
nnoremap <C-n> :NERDTreeTabsToggle<CR>

" Insert a new line in normal mode, I just lazy
nnoremap <expr> <CR> &ma ? "o\<ESC>" : "\<CR>"

" map these by hand
inoremap <C-h> <BS>
nnoremap <C-h> <BS>

" hot key for macro register ``q`` / ``z``
" Do register ``q`` / ``z``
nnoremap dq @q
nnoremap dz @z

" redraw syntax highlighting
nnoremap <leader><C-l> :syntax sync fromstart<CR>

" redraw, also wipe search highlighting
nnoremap <C-l> :noh<CR><C-l>

" convenient copy to system clipboard
vnoremap Y "*ygv<ESC>
nnoremap Y "*y
vnoremap y ygv<ESC>

" QUIT!
command! Q execute "q!"
command! Qa execute "qa!"
command! QA execute "qa!"

" WRITE!
cnoremap w!! w !sudo tee %

" open file in new tab
nnoremap gF <C-w>gf

" indenting in visual mode
vnoremap > >gv
vnoremap < <gv


function! CleanUnusedBuffers ()
    for l:bnr in range(1, bufnr('$'))
        if bufexists(l:bnr) && !bufloaded(l:bnr)
            execute "bwipeout ". l:bnr
        endif
    endfor
endfunction
nnoremap <SPACE> :call CleanUnusedBuffers()<CR>


" status line, show plugin modes
function! VimTableModeStatusString ()
    if exists('*tablemode#IsActive') && tablemode#IsActive()
        return '[table]'
    endif
    return ''
endfunction


if !empty(glob('~/.vim/plugged/ime.vim'))
    set statusline=%<%{ime#mode()}%{VimTableModeStatusString()}%f\ %h%m%r%=%y\ %-14.(%l,%c%V%)\ %P
endif

" =============== "
" Plugin settings "
" =============== "

" vim-table-mode settings ([normal] <leader>tm to enable table mode)
let g:table_mode_corner_corner = '+'
let g:table_mode_header_fillchar = '='

let g:todo_loop_checkbox = '<C-c>'
let g:todo_select_checkbox = '<C-k>'

" change nerdtree arrows
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '~'

let g:ime_boshiamy_custom_table = '~/.boshiamy.table'
let g:ime_plugins = ['builtin-boshiamy', 'builtin-kana', 'builtin-chewing', 'builtin-unicode']
let g:ime_plugins += ['emoji', 'phonetic', 'runes', 'wide', 'braille']
let g:ime_select_mode_style = 'fallback'
let g:ime_phonetic_custom_table = '~/.phonetic.table'

let g:rst_title_style = 'shorten'
let g:rst_title_length_step = 0
