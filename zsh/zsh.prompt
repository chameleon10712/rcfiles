setopt PROMPT_SUBST

autoload -U colors && colors

black="%{$fg_bold[black]%}"
red="%{$fg_bold[red]%}"
green="%{$fg_bold[green]%}"
yellow="%{$fg_bold[yellow]%}"
blue="%{$fg_bold[blue]%}"
magenta="%{$fg_bold[magenta]%}"
purple=$magenta
cyan="%{$fg_bold[cyan]%}"
white="%{$fg_bold[white]%}"

d_red="%{$fg_no_bold[red]%}"
d_green="%{$fg_no_bold[green]%}"
d_yellow="%{$fg_no_bold[yellow]%}"
d_blue="%{$fg_no_bold[blue]%}"
d_magenta="%{$fg_no_bold[magenta]%}"
d_purple=$d_magenta
d_cyan="%{$fg_no_bold[cyan]%}"
gray="%{$fg_no_bold[white]%}"
grey=$gray
end="%{$reset_color%}"

last_cmd_succ="%(?.${black}.${red})|${end}"

function _dir_stacks {
    depth=$(dirs -p | wc -l | tr -d ' ')
    if [[ $depth -gt 1 ]]; then
        dir_stack_str=$(printf '%*s' ${depth} | tr ' ' '[')
        echo "${d_green}${dir_stack_str:1}"
    fi
}

function _current_path {
    echo "$(_dir_stacks)${green}[%~]${end}"
}

if [[ -n "$(command -v git)" ]]; then
    # Oh yes, we really have git
    function _git_info {
        local branch_name=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
        if [[ -n $branch_name ]]; then
            # we are now in a git repo
            local repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
            local repo_name=""
            if [[ -n $repo_root ]]; then
                repo_name="$(basename $repo_root):"
            fi

            if [[ -f $repo_root/.git/refs/stash ]]; then
                local stashes_count=$(git stash list 2>/dev/null | wc -l | tr -d ' ')
                local stashes_stack_str=$(printf '%*s' ${stashes_count} | tr ' ' '(')
            fi

            local is_bare=$(git rev-parse --is-bare-repository 2>/dev/null)
            if [[ "$is_bare" == "true" ]]; then
                local color=${blue}
                branch_name='=BARE='
            elif [[ -z $(git status --porcelain 2>/dev/null) ]]; then
                # This repo is clean
                local color=${blue}
            elif [[ -z $(git status -s -uno 2>/dev/null) ]]; then
                # This repo is dirty, but no modify on tracked files
                local color=${magenta}
            else
                # This repo is dirty
                local color=${red}
            fi
            echo "${color}${stashes_stack_str}($repo_name${branch_name})${end}"
        fi
    }
else
    function _git_info {}
fi

vim_mode_str="${black}[zsh]${end}"
date_str="${cyan}%D{%m/%d}${end}"
time_str="${cyan}%D{%H:%M}${end}"   # %D{...} man strftime
user_name_str="${yellow}%n${end}"
at_str="${gray}@${end}"
host_name_str="${white}%m${end}"
uid_str="%(!.#.>)"

function _virtual_env {
    if [[ -n "$VIRTUAL_ENV" ]]; then
        echo "${blue}[${VIRTUAL_ENV##*/}]${end}"
    fi
}

function _set_prompt {
    case ${KEYMAP} in
        vicmd)      local vim_mode_str="${cyan}:zsh$ZSH_VERSION:${end}" ;;
        viins|main) local vim_mode_str="${black}[zsh$ZSH_VERSION]${end}" ;;
    esac

    dynamic_line="$(_virtual_env)$(_git_info)"
    if [[ $#jobstates -ge 1 ]]; then
        # this cannot be written in function
        # because $#jobstates does not passed into subshell
        dynamic_line="${dynamic_line}${blue}jobs:$#jobstates${end}"
    fi
    prompt="${last_cmd_succ}${date_str}$(_current_path)${vim_mode_str}
${last_cmd_succ}${time_str}${user_name_str}${at_str}${host_name_str}${uid_str} "
    if [[ -n "${dynamic_line}" ]]; then
        prompt="${last_cmd_succ}${dynamic_line}
$prompt"
    fi
}

function zle-keymap-select zle-line-init {
    _set_prompt
    today=$(date "+%Y%m%d")
    zle reset-prompt
}
zle -N zle-line-init
zle -N zle-keymap-select

_set_prompt
