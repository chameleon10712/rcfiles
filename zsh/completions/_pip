#compdef pip pip2 pip3

_pip () {
    _arguments\
        '1: :->subcommand'\
        '2: :->subcommand-options'\
        {-h,--help}'[show help]'\
        {-v,--verbose}'[give more output]'\
        {-V,--version}'[show version and exit]'\
        {-q,--quiet}'[give less output]'\
        '--isolated[ignoring environment variables and user configuration]'\
        '--no-cache-dir[disable the cache]'\
        "--disable-pip-version-check[don\'t periodically check new version of pip]"\
        '--log[path to a verbose appending log]:'\
        '--proxy[specify a proxy]:'\
        '--retries[maximum number of retries each connection should attempt]:'\
        '--timeout[set the socket timeout]:'\
        '--exists-action[default action when a path already exists]:'\
        '--trusted-host[mark this host as trusted]:'\
        '--cert[path to alternate CA bundle]:'\
        '--client-cert[path to SSL client certificate]:'\
        '--cache-dir[store the cache data]:'

    case $state in
        subcommand)
            _arguments\
                '*: :((install\:"install packages"
                download\:"download packages"
                uninstall\:"uninstall packages"
                freeze\:"output installed packages in requirements format"
                list\:"list installed packages"
                show\:"show information about installed packages"
                search\:"search PyPI for packages"
                wheel\:"build wheels from your requirements"
                hash\:"compute hashes of package archives"
                completion\:"a helper command used for command completion"
                help\:"show help for commands"))'
            ;;

        subcommand-options)
            local tmp
            tmp=("${(@)words:1}")
            while [[ "${tmp[1]}" == '-'* ]]; do
                tmp=("${(@)tmp:1}")
            done
            subcommand="${tmp[1]}"
            _pip-${subcommand}
            ;;
    esac
}

_pip-uninstall () {
    _arguments\
        '*: :comp_package_list_menu'\
        {-r,--requirement}'[uninstall all the packages listed in the given requirements file]:'\
        {-y,--yes}"[don\'t ask for confirmation of uninstall deletions]"
}

comp_package_list_menu () {
    _arguments\
        "*: :(($(pip list | sed 's/^\([^ ]*\) \(.*\)$/\1:"\1 \2"/')))"
}

_pip "$@"
