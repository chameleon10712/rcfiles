#compdef pip pip2 pip3

_pip-uninstall () {
    _arguments \
}

_package_list_menu () {
    _arguments \
        "*: :(($(pip list | sed 's/^\([^ ]*\) \(.*\)$/\1:"\1 \2"/')))"
}

local -a general_opts
general_opts=(
    {-h,--help}"[show help]"
    "--isolated[ignoring environment variables and user configuration]"
    {-v,--verbose}"[give more output]"
    {-V,--version}"[show version and exit]"
    {-q,--quiet}"[give less output]"
    "--log=[path to a verbose appending log]:"
    "--proxy=[specify a proxy]:"
    "--retries=[maximum number of retries each connection should attempt]:"
    "--timeout=[set the socket timeout]:"
    "--exists-action=[default action when a path already exists]:"
    "--trusted-host=[mark this host as trusted]:"
    "--cert=[path to alternate CA bundle]:"
    "--client-cert=[path to SSL client certificate]:"
    "--cache-dir=[store the cache data]:"
    "--no-cache-dir[disable the cache]"
    "--disable-pip-version-check[don\'t periodically check new version of pip]"
)

typeset -A opt_args
local curcontext="$curcontext" state line ret=1

_arguments -C \
    ':Subcommands:->subcmd'\
    $general_opts \
    '*::Options:->options'

case $state in
    subcmd)
        local -a subcommands
        subcommands=(
            "install:install packages"
            "download:download packages"
            "uninstall:uninstall packages"
            "freeze:output installed packages in requirements format"
            "list:list installed packages"
            "show:show information about installed packages"
            "search:search PyPI for packages"
            "wheel:build wheels from your requirements"
            "hash:compute hashes of package archives"
            "completion:a helper command used for command completion"
            "help:show help for commands"
        )
        _describe 'subcommands' subcommands
        ;;

    options)
        local -a subcmd_opts
        subcmd_opts=( $general_opts )

        local tmp subcmd
        tmp=("${(@)${(z)LBUFFER}:1}")   # ignore "pip"
        while [[ "${tmp[1]}" == '-'* ]]; do
            # remove leading options
            tmp=("${(@)tmp:1}")
        done
        subcmd="${tmp[1]}"

        case $subcmd in
            uninstall)
                subcmd_opts+=(
                    "*: :_package_list_menu"
                    {-r,--requirement}"=[uninstall packages in the given requirements file]:_files"
                    {-y,--yes}"[don\'t ask for confirmation of uninstall deletions]"
                )
                ;;
            install)
                subcmd_opts+=(
                    "*: :_package_list_menu"
                    {-c,--constraint}="[Constrain versions using the given constraints file]:"
                    {-e,--editable}="[Install a project in editable mode]:"
                    {-r,--requirement}="[Install from the given requirements file]:"
                    {-b,--build}="[Directory to unpack packages into and build in]:"
                    {-t,--target}="[Install packages into <dir>]:"
                    {-d,--download}="[Download packages into <dir> instead of installing them]:"
                    --src="[Directory to check out editable projects into]:"
                    {-U,--upgrade}"[Upgrade all specified packages to the newest available version]"
                    --force-reinstall"[reinstall all packages even if they are already up-to-date]"
                    {-I,--ignore-installed}"[Ignore the installed packages]"
                    --no-deps"[Don't install package dependencies]"
                    --install-option="[Extra arguments to be supplied to the setup.py install command]:"
                    --global-option="[Extra global options to be supplied to the setup.py call before the install command]:"
                    --user"[Install to the Python user install directory for your platform]"
                    --egg"[Install packages as eggs like pip normally does. This option is not about installing]"
                    --root="[Install everything relative to this alternate root directory]:"
                    --prefix="[Installation prefix where lib, bin and other top-level folders are placed]:"
                    --compile"[Compile py files to pyc]"
                    --no-compile"[Do not compile py files to pyc]"
                    --no-binary="[Do not use binary packages]:"
                    --only-binary="[Do not use source packages]:"
                    --pre"[Include pre-release and development versions]"
                    --no-clean"[Don't clean up build directories]"
                    --require-hashes"[Require a hash to check each requirement]"
                )
            ;;
        esac
        _arguments $subcmd_opts
        ;;

    # subcommand-options)
    #     local tmp
    #     tmp=("${(@)words:1}")
    #     while [[ "${tmp[1]}" == '-'* ]]; do
    #         tmp=("${(@)tmp:1}")
    #     done
    #     subcommand="${tmp[1]}"
    #     _pip-${subcommand}
    #     ;;
esac
